697. Degree of an Array
Given a non-empty array of non-negative integers nums, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of nums, that has the same degree as nums.

Example 1:

Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.
Example 2:

Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because element 2 is repeated 3 times.
So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.

class Solution {
    public int findShortestSubArray(int[] nums) {
        int degree = 0;
        HashMap<Integer,int[]>map=new HashMap<>();
        for(int i =0;i<nums.length;i++){
            int num = nums[i];
            if(!map.containsKey(num)){
                map.put(num , new int[]{i,i,1});
            }else{
                int [] arr = map.get(num);
                arr [1] = i;
                arr [2]++;
            }
            degree = Math.max(degree,map.get(num)[2]);
            }
        int minLen = nums.length; 
        for (int key : map.keySet()) { 
            int[] arr = map.get(key); 
            if (arr[2] == degree) { 
                minLen = Math.min(minLen, arr[1] - arr[0] + 1); 
            } 
        } 
    return minLen;
    } 
    }

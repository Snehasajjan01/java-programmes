238. Product of Array Except Self
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
class Solution {
    public int[] productExceptSelf(int[] nums) {
        // Prefix array: stores product of all elements to the LEFT of index i
        int pre[] = new int[nums.length];
        // Suffix array: stores product of all elements to the RIGHT of index i
        int suff[] = new int[nums.length];

        // No elements to the left of index 0, so prefix product is 1
        pre[0] = 1;
        // No elements to the right of last index, so suffix product is 1
        suff[nums.length-1] = 1;

        // Build prefix product array
        // pre[i] = product of nums[0] to nums[i-1]
        for(int i = 1; i < nums.length; i++){
            pre[i] = pre[i-1] * nums[i-1];
        }

        // Build suffix product array
        // suff[i] = product of nums[i+1] to nums[nums.length-1]
        for(int i = nums.length-2; i >= 0; i--){
            suff[i] = suff[i+1] * nums[i+1];
        }

        // Final answer: product of prefix and suffix at each index
        int ans[] = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            ans[i] = pre[i] * suff[i];
        }

        return ans; // return the array with product of all except self
    }
}
